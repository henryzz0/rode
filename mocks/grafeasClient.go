// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rode/rode/protodeps/grafeas/proto/v1beta1/grafeas_go_proto (interfaces: GrafeasV1Beta1Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grafeas_go_proto "github.com/rode/rode/protodeps/grafeas/proto/v1beta1/grafeas_go_proto"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

// MockGrafeasClient is a mock of GrafeasV1Beta1Client interface
type MockGrafeasClient struct {
	ctrl     *gomock.Controller
	recorder *MockGrafeasClientMockRecorder
}

// MockGrafeasClientMockRecorder is the mock recorder for MockGrafeasClient
type MockGrafeasClientMockRecorder struct {
	mock *MockGrafeasClient
}

// NewMockGrafeasClient creates a new mock instance
func NewMockGrafeasClient(ctrl *gomock.Controller) *MockGrafeasClient {
	mock := &MockGrafeasClient{ctrl: ctrl}
	mock.recorder = &MockGrafeasClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGrafeasClient) EXPECT() *MockGrafeasClientMockRecorder {
	return m.recorder
}

// BatchCreateNotes mocks base method
func (m *MockGrafeasClient) BatchCreateNotes(arg0 context.Context, arg1 *grafeas_go_proto.BatchCreateNotesRequest, arg2 ...grpc.CallOption) (*grafeas_go_proto.BatchCreateNotesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateNotes", varargs...)
	ret0, _ := ret[0].(*grafeas_go_proto.BatchCreateNotesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateNotes indicates an expected call of BatchCreateNotes
func (mr *MockGrafeasClientMockRecorder) BatchCreateNotes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateNotes", reflect.TypeOf((*MockGrafeasClient)(nil).BatchCreateNotes), varargs...)
}

// BatchCreateOccurrences mocks base method
func (m *MockGrafeasClient) BatchCreateOccurrences(arg0 context.Context, arg1 *grafeas_go_proto.BatchCreateOccurrencesRequest, arg2 ...grpc.CallOption) (*grafeas_go_proto.BatchCreateOccurrencesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateOccurrences", varargs...)
	ret0, _ := ret[0].(*grafeas_go_proto.BatchCreateOccurrencesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateOccurrences indicates an expected call of BatchCreateOccurrences
func (mr *MockGrafeasClientMockRecorder) BatchCreateOccurrences(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateOccurrences", reflect.TypeOf((*MockGrafeasClient)(nil).BatchCreateOccurrences), varargs...)
}

// CreateNote mocks base method
func (m *MockGrafeasClient) CreateNote(arg0 context.Context, arg1 *grafeas_go_proto.CreateNoteRequest, arg2 ...grpc.CallOption) (*grafeas_go_proto.Note, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNote", varargs...)
	ret0, _ := ret[0].(*grafeas_go_proto.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote
func (mr *MockGrafeasClientMockRecorder) CreateNote(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockGrafeasClient)(nil).CreateNote), varargs...)
}

// CreateOccurrence mocks base method
func (m *MockGrafeasClient) CreateOccurrence(arg0 context.Context, arg1 *grafeas_go_proto.CreateOccurrenceRequest, arg2 ...grpc.CallOption) (*grafeas_go_proto.Occurrence, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOccurrence", varargs...)
	ret0, _ := ret[0].(*grafeas_go_proto.Occurrence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOccurrence indicates an expected call of CreateOccurrence
func (mr *MockGrafeasClientMockRecorder) CreateOccurrence(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOccurrence", reflect.TypeOf((*MockGrafeasClient)(nil).CreateOccurrence), varargs...)
}

// DeleteNote mocks base method
func (m *MockGrafeasClient) DeleteNote(arg0 context.Context, arg1 *grafeas_go_proto.DeleteNoteRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNote", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNote indicates an expected call of DeleteNote
func (mr *MockGrafeasClientMockRecorder) DeleteNote(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockGrafeasClient)(nil).DeleteNote), varargs...)
}

// DeleteOccurrence mocks base method
func (m *MockGrafeasClient) DeleteOccurrence(arg0 context.Context, arg1 *grafeas_go_proto.DeleteOccurrenceRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOccurrence", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOccurrence indicates an expected call of DeleteOccurrence
func (mr *MockGrafeasClientMockRecorder) DeleteOccurrence(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOccurrence", reflect.TypeOf((*MockGrafeasClient)(nil).DeleteOccurrence), varargs...)
}

// GetNote mocks base method
func (m *MockGrafeasClient) GetNote(arg0 context.Context, arg1 *grafeas_go_proto.GetNoteRequest, arg2 ...grpc.CallOption) (*grafeas_go_proto.Note, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNote", varargs...)
	ret0, _ := ret[0].(*grafeas_go_proto.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote
func (mr *MockGrafeasClientMockRecorder) GetNote(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockGrafeasClient)(nil).GetNote), varargs...)
}

// GetOccurrence mocks base method
func (m *MockGrafeasClient) GetOccurrence(arg0 context.Context, arg1 *grafeas_go_proto.GetOccurrenceRequest, arg2 ...grpc.CallOption) (*grafeas_go_proto.Occurrence, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOccurrence", varargs...)
	ret0, _ := ret[0].(*grafeas_go_proto.Occurrence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOccurrence indicates an expected call of GetOccurrence
func (mr *MockGrafeasClientMockRecorder) GetOccurrence(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOccurrence", reflect.TypeOf((*MockGrafeasClient)(nil).GetOccurrence), varargs...)
}

// GetOccurrenceNote mocks base method
func (m *MockGrafeasClient) GetOccurrenceNote(arg0 context.Context, arg1 *grafeas_go_proto.GetOccurrenceNoteRequest, arg2 ...grpc.CallOption) (*grafeas_go_proto.Note, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOccurrenceNote", varargs...)
	ret0, _ := ret[0].(*grafeas_go_proto.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOccurrenceNote indicates an expected call of GetOccurrenceNote
func (mr *MockGrafeasClientMockRecorder) GetOccurrenceNote(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOccurrenceNote", reflect.TypeOf((*MockGrafeasClient)(nil).GetOccurrenceNote), varargs...)
}

// GetVulnerabilityOccurrencesSummary mocks base method
func (m *MockGrafeasClient) GetVulnerabilityOccurrencesSummary(arg0 context.Context, arg1 *grafeas_go_proto.GetVulnerabilityOccurrencesSummaryRequest, arg2 ...grpc.CallOption) (*grafeas_go_proto.VulnerabilityOccurrencesSummary, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVulnerabilityOccurrencesSummary", varargs...)
	ret0, _ := ret[0].(*grafeas_go_proto.VulnerabilityOccurrencesSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVulnerabilityOccurrencesSummary indicates an expected call of GetVulnerabilityOccurrencesSummary
func (mr *MockGrafeasClientMockRecorder) GetVulnerabilityOccurrencesSummary(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVulnerabilityOccurrencesSummary", reflect.TypeOf((*MockGrafeasClient)(nil).GetVulnerabilityOccurrencesSummary), varargs...)
}

// ListNoteOccurrences mocks base method
func (m *MockGrafeasClient) ListNoteOccurrences(arg0 context.Context, arg1 *grafeas_go_proto.ListNoteOccurrencesRequest, arg2 ...grpc.CallOption) (*grafeas_go_proto.ListNoteOccurrencesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNoteOccurrences", varargs...)
	ret0, _ := ret[0].(*grafeas_go_proto.ListNoteOccurrencesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNoteOccurrences indicates an expected call of ListNoteOccurrences
func (mr *MockGrafeasClientMockRecorder) ListNoteOccurrences(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNoteOccurrences", reflect.TypeOf((*MockGrafeasClient)(nil).ListNoteOccurrences), varargs...)
}

// ListNotes mocks base method
func (m *MockGrafeasClient) ListNotes(arg0 context.Context, arg1 *grafeas_go_proto.ListNotesRequest, arg2 ...grpc.CallOption) (*grafeas_go_proto.ListNotesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotes", varargs...)
	ret0, _ := ret[0].(*grafeas_go_proto.ListNotesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotes indicates an expected call of ListNotes
func (mr *MockGrafeasClientMockRecorder) ListNotes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotes", reflect.TypeOf((*MockGrafeasClient)(nil).ListNotes), varargs...)
}

// ListOccurrences mocks base method
func (m *MockGrafeasClient) ListOccurrences(arg0 context.Context, arg1 *grafeas_go_proto.ListOccurrencesRequest, arg2 ...grpc.CallOption) (*grafeas_go_proto.ListOccurrencesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOccurrences", varargs...)
	ret0, _ := ret[0].(*grafeas_go_proto.ListOccurrencesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOccurrences indicates an expected call of ListOccurrences
func (mr *MockGrafeasClientMockRecorder) ListOccurrences(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOccurrences", reflect.TypeOf((*MockGrafeasClient)(nil).ListOccurrences), varargs...)
}

// UpdateNote mocks base method
func (m *MockGrafeasClient) UpdateNote(arg0 context.Context, arg1 *grafeas_go_proto.UpdateNoteRequest, arg2 ...grpc.CallOption) (*grafeas_go_proto.Note, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNote", varargs...)
	ret0, _ := ret[0].(*grafeas_go_proto.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNote indicates an expected call of UpdateNote
func (mr *MockGrafeasClientMockRecorder) UpdateNote(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockGrafeasClient)(nil).UpdateNote), varargs...)
}

// UpdateOccurrence mocks base method
func (m *MockGrafeasClient) UpdateOccurrence(arg0 context.Context, arg1 *grafeas_go_proto.UpdateOccurrenceRequest, arg2 ...grpc.CallOption) (*grafeas_go_proto.Occurrence, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOccurrence", varargs...)
	ret0, _ := ret[0].(*grafeas_go_proto.Occurrence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOccurrence indicates an expected call of UpdateOccurrence
func (mr *MockGrafeasClientMockRecorder) UpdateOccurrence(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOccurrence", reflect.TypeOf((*MockGrafeasClient)(nil).UpdateOccurrence), varargs...)
}
